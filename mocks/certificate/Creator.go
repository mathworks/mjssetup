// Copyright 2025 The MathWorks, Inc.
// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	certificate "github.com/mathworks/mjssetup/pkg/certificate"
	mock "github.com/stretchr/testify/mock"
)

// Creator is an autogenerated mock type for the Creator type
type Creator struct {
	mock.Mock
}

type Creator_Expecter struct {
	mock *mock.Mock
}

func (_m *Creator) EXPECT() *Creator_Expecter {
	return &Creator_Expecter{mock: &_m.Mock}
}

// CreateSharedSecret provides a mock function with given fields:
func (_m *Creator) CreateSharedSecret() (*certificate.SharedSecret, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSharedSecret")
	}

	var r0 *certificate.SharedSecret
	var r1 error
	if rf, ok := ret.Get(0).(func() (*certificate.SharedSecret, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *certificate.SharedSecret); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.SharedSecret)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creator_CreateSharedSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSharedSecret'
type Creator_CreateSharedSecret_Call struct {
	*mock.Call
}

// CreateSharedSecret is a helper method to define mock.On call
func (_e *Creator_Expecter) CreateSharedSecret() *Creator_CreateSharedSecret_Call {
	return &Creator_CreateSharedSecret_Call{Call: _e.mock.On("CreateSharedSecret")}
}

func (_c *Creator_CreateSharedSecret_Call) Run(run func()) *Creator_CreateSharedSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Creator_CreateSharedSecret_Call) Return(_a0 *certificate.SharedSecret, _a1 error) *Creator_CreateSharedSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Creator_CreateSharedSecret_Call) RunAndReturn(run func() (*certificate.SharedSecret, error)) *Creator_CreateSharedSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCertificate provides a mock function with given fields: _a0
func (_m *Creator) GenerateCertificate(_a0 *certificate.SharedSecret) (*certificate.Certificate, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCertificate")
	}

	var r0 *certificate.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(*certificate.SharedSecret) (*certificate.Certificate, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*certificate.SharedSecret) *certificate.Certificate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(*certificate.SharedSecret) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creator_GenerateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCertificate'
type Creator_GenerateCertificate_Call struct {
	*mock.Call
}

// GenerateCertificate is a helper method to define mock.On call
//   - _a0 *certificate.SharedSecret
func (_e *Creator_Expecter) GenerateCertificate(_a0 interface{}) *Creator_GenerateCertificate_Call {
	return &Creator_GenerateCertificate_Call{Call: _e.mock.On("GenerateCertificate", _a0)}
}

func (_c *Creator_GenerateCertificate_Call) Run(run func(_a0 *certificate.SharedSecret)) *Creator_GenerateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificate.SharedSecret))
	})
	return _c
}

func (_c *Creator_GenerateCertificate_Call) Return(_a0 *certificate.Certificate, _a1 error) *Creator_GenerateCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Creator_GenerateCertificate_Call) RunAndReturn(run func(*certificate.SharedSecret) (*certificate.Certificate, error)) *Creator_GenerateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCertificateWithHostname provides a mock function with given fields: _a0, _a1
func (_m *Creator) GenerateCertificateWithHostname(_a0 *certificate.SharedSecret, _a1 string) (*certificate.Certificate, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCertificateWithHostname")
	}

	var r0 *certificate.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(*certificate.SharedSecret, string) (*certificate.Certificate, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(*certificate.SharedSecret, string) *certificate.Certificate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(*certificate.SharedSecret, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creator_GenerateCertificateWithHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCertificateWithHostname'
type Creator_GenerateCertificateWithHostname_Call struct {
	*mock.Call
}

// GenerateCertificateWithHostname is a helper method to define mock.On call
//   - _a0 *certificate.SharedSecret
//   - _a1 string
func (_e *Creator_Expecter) GenerateCertificateWithHostname(_a0 interface{}, _a1 interface{}) *Creator_GenerateCertificateWithHostname_Call {
	return &Creator_GenerateCertificateWithHostname_Call{Call: _e.mock.On("GenerateCertificateWithHostname", _a0, _a1)}
}

func (_c *Creator_GenerateCertificateWithHostname_Call) Run(run func(_a0 *certificate.SharedSecret, _a1 string)) *Creator_GenerateCertificateWithHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*certificate.SharedSecret), args[1].(string))
	})
	return _c
}

func (_c *Creator_GenerateCertificateWithHostname_Call) Return(_a0 *certificate.Certificate, _a1 error) *Creator_GenerateCertificateWithHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Creator_GenerateCertificateWithHostname_Call) RunAndReturn(run func(*certificate.SharedSecret, string) (*certificate.Certificate, error)) *Creator_GenerateCertificateWithHostname_Call {
	_c.Call.Return(run)
	return _c
}

// LoadCertificate provides a mock function with given fields: _a0
func (_m *Creator) LoadCertificate(_a0 []byte) (*certificate.Certificate, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadCertificate")
	}

	var r0 *certificate.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*certificate.Certificate, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) *certificate.Certificate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creator_LoadCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCertificate'
type Creator_LoadCertificate_Call struct {
	*mock.Call
}

// LoadCertificate is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Creator_Expecter) LoadCertificate(_a0 interface{}) *Creator_LoadCertificate_Call {
	return &Creator_LoadCertificate_Call{Call: _e.mock.On("LoadCertificate", _a0)}
}

func (_c *Creator_LoadCertificate_Call) Run(run func(_a0 []byte)) *Creator_LoadCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Creator_LoadCertificate_Call) Return(_a0 *certificate.Certificate, _a1 error) *Creator_LoadCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Creator_LoadCertificate_Call) RunAndReturn(run func([]byte) (*certificate.Certificate, error)) *Creator_LoadCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSharedSecret provides a mock function with given fields: _a0
func (_m *Creator) LoadSharedSecret(_a0 []byte) (*certificate.SharedSecret, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadSharedSecret")
	}

	var r0 *certificate.SharedSecret
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*certificate.SharedSecret, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) *certificate.SharedSecret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificate.SharedSecret)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Creator_LoadSharedSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSharedSecret'
type Creator_LoadSharedSecret_Call struct {
	*mock.Call
}

// LoadSharedSecret is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Creator_Expecter) LoadSharedSecret(_a0 interface{}) *Creator_LoadSharedSecret_Call {
	return &Creator_LoadSharedSecret_Call{Call: _e.mock.On("LoadSharedSecret", _a0)}
}

func (_c *Creator_LoadSharedSecret_Call) Run(run func(_a0 []byte)) *Creator_LoadSharedSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Creator_LoadSharedSecret_Call) Return(_a0 *certificate.SharedSecret, _a1 error) *Creator_LoadSharedSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Creator_LoadSharedSecret_Call) RunAndReturn(run func([]byte) (*certificate.SharedSecret, error)) *Creator_LoadSharedSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreator creates a new instance of Creator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Creator {
	mock := &Creator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
