// Copyright 2025 The MathWorks, Inc.
// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileHandler is an autogenerated mock type for the FileHandler type
type FileHandler struct {
	mock.Mock
}

type FileHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *FileHandler) EXPECT() *FileHandler_Expecter {
	return &FileHandler_Expecter{mock: &_m.Mock}
}

// EnsureDirExists provides a mock function with given fields: dirname
func (_m *FileHandler) EnsureDirExists(dirname string) error {
	ret := _m.Called(dirname)

	if len(ret) == 0 {
		panic("no return value specified for EnsureDirExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dirname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileHandler_EnsureDirExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureDirExists'
type FileHandler_EnsureDirExists_Call struct {
	*mock.Call
}

// EnsureDirExists is a helper method to define mock.On call
//   - dirname string
func (_e *FileHandler_Expecter) EnsureDirExists(dirname interface{}) *FileHandler_EnsureDirExists_Call {
	return &FileHandler_EnsureDirExists_Call{Call: _e.mock.On("EnsureDirExists", dirname)}
}

func (_c *FileHandler_EnsureDirExists_Call) Run(run func(dirname string)) *FileHandler_EnsureDirExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileHandler_EnsureDirExists_Call) Return(_a0 error) *FileHandler_EnsureDirExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileHandler_EnsureDirExists_Call) RunAndReturn(run func(string) error) *FileHandler_EnsureDirExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetCwd provides a mock function with given fields:
func (_m *FileHandler) GetCwd() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCwd")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileHandler_GetCwd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCwd'
type FileHandler_GetCwd_Call struct {
	*mock.Call
}

// GetCwd is a helper method to define mock.On call
func (_e *FileHandler_Expecter) GetCwd() *FileHandler_GetCwd_Call {
	return &FileHandler_GetCwd_Call{Call: _e.mock.On("GetCwd")}
}

func (_c *FileHandler_GetCwd_Call) Run(run func()) *FileHandler_GetCwd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileHandler_GetCwd_Call) Return(_a0 string, _a1 error) *FileHandler_GetCwd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileHandler_GetCwd_Call) RunAndReturn(run func() (string, error)) *FileHandler_GetCwd_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: filename
func (_m *FileHandler) ReadFile(filename string) ([]byte, error) {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileHandler_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type FileHandler_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - filename string
func (_e *FileHandler_Expecter) ReadFile(filename interface{}) *FileHandler_ReadFile_Call {
	return &FileHandler_ReadFile_Call{Call: _e.mock.On("ReadFile", filename)}
}

func (_c *FileHandler_ReadFile_Call) Run(run func(filename string)) *FileHandler_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileHandler_ReadFile_Call) Return(_a0 []byte, _a1 error) *FileHandler_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileHandler_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *FileHandler_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteJSON provides a mock function with given fields: filenames, objToWrite
func (_m *FileHandler) WriteJSON(filenames string, objToWrite any) error {
	ret := _m.Called(filenames, objToWrite)

	if len(ret) == 0 {
		panic("no return value specified for WriteJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, any) error); ok {
		r0 = rf(filenames, objToWrite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileHandler_WriteJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteJSON'
type FileHandler_WriteJSON_Call struct {
	*mock.Call
}

// WriteJSON is a helper method to define mock.On call
//   - filenames string
//   - objToWrite any
func (_e *FileHandler_Expecter) WriteJSON(filenames interface{}, objToWrite interface{}) *FileHandler_WriteJSON_Call {
	return &FileHandler_WriteJSON_Call{Call: _e.mock.On("WriteJSON", filenames, objToWrite)}
}

func (_c *FileHandler_WriteJSON_Call) Run(run func(filenames string, objToWrite any)) *FileHandler_WriteJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *FileHandler_WriteJSON_Call) Return(_a0 error) *FileHandler_WriteJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileHandler_WriteJSON_Call) RunAndReturn(run func(string, any) error) *FileHandler_WriteJSON_Call {
	_c.Call.Return(run)
	return _c
}

// WriteText provides a mock function with given fields: filename, txt
func (_m *FileHandler) WriteText(filename string, txt string) error {
	ret := _m.Called(filename, txt)

	if len(ret) == 0 {
		panic("no return value specified for WriteText")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, txt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileHandler_WriteText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteText'
type FileHandler_WriteText_Call struct {
	*mock.Call
}

// WriteText is a helper method to define mock.On call
//   - filename string
//   - txt string
func (_e *FileHandler_Expecter) WriteText(filename interface{}, txt interface{}) *FileHandler_WriteText_Call {
	return &FileHandler_WriteText_Call{Call: _e.mock.On("WriteText", filename, txt)}
}

func (_c *FileHandler_WriteText_Call) Run(run func(filename string, txt string)) *FileHandler_WriteText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *FileHandler_WriteText_Call) Return(_a0 error) *FileHandler_WriteText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileHandler_WriteText_Call) RunAndReturn(run func(string, string) error) *FileHandler_WriteText_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileHandler creates a new instance of FileHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileHandler {
	mock := &FileHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
