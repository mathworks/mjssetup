// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	keytool "github.com/mathworks/mjssetup/internal/keytool"
	mock "github.com/stretchr/testify/mock"
)

// Keytool is an autogenerated mock type for the Keytool type
type Keytool struct {
	mock.Mock
}

type Keytool_Expecter struct {
	mock *mock.Mock
}

func (_m *Keytool) EXPECT() *Keytool_Expecter {
	return &Keytool_Expecter{mock: &_m.Mock}
}

// CreateProfile provides a mock function with given fields: _a0
func (_m *Keytool) CreateProfile(_a0 *keytool.CreateProfileInputs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*keytool.CreateProfileInputs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Keytool_CreateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfile'
type Keytool_CreateProfile_Call struct {
	*mock.Call
}

// CreateProfile is a helper method to define mock.On call
//   - _a0 *keytool.CreateProfileInputs
func (_e *Keytool_Expecter) CreateProfile(_a0 interface{}) *Keytool_CreateProfile_Call {
	return &Keytool_CreateProfile_Call{Call: _e.mock.On("CreateProfile", _a0)}
}

func (_c *Keytool_CreateProfile_Call) Run(run func(_a0 *keytool.CreateProfileInputs)) *Keytool_CreateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*keytool.CreateProfileInputs))
	})
	return _c
}

func (_c *Keytool_CreateProfile_Call) Return(_a0 error) *Keytool_CreateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Keytool_CreateProfile_Call) RunAndReturn(run func(*keytool.CreateProfileInputs) error) *Keytool_CreateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSharedSecret provides a mock function with given fields: _a0
func (_m *Keytool) CreateSharedSecret(_a0 *keytool.CreateSharedSecretInputs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSharedSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*keytool.CreateSharedSecretInputs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Keytool_CreateSharedSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSharedSecret'
type Keytool_CreateSharedSecret_Call struct {
	*mock.Call
}

// CreateSharedSecret is a helper method to define mock.On call
//   - _a0 *keytool.CreateSharedSecretInputs
func (_e *Keytool_Expecter) CreateSharedSecret(_a0 interface{}) *Keytool_CreateSharedSecret_Call {
	return &Keytool_CreateSharedSecret_Call{Call: _e.mock.On("CreateSharedSecret", _a0)}
}

func (_c *Keytool_CreateSharedSecret_Call) Run(run func(_a0 *keytool.CreateSharedSecretInputs)) *Keytool_CreateSharedSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*keytool.CreateSharedSecretInputs))
	})
	return _c
}

func (_c *Keytool_CreateSharedSecret_Call) Return(_a0 error) *Keytool_CreateSharedSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Keytool_CreateSharedSecret_Call) RunAndReturn(run func(*keytool.CreateSharedSecretInputs) error) *Keytool_CreateSharedSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCertificate provides a mock function with given fields: _a0
func (_m *Keytool) GenerateCertificate(_a0 *keytool.GenerateCertificateInputs) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*keytool.GenerateCertificateInputs) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Keytool_GenerateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCertificate'
type Keytool_GenerateCertificate_Call struct {
	*mock.Call
}

// GenerateCertificate is a helper method to define mock.On call
//   - _a0 *keytool.GenerateCertificateInputs
func (_e *Keytool_Expecter) GenerateCertificate(_a0 interface{}) *Keytool_GenerateCertificate_Call {
	return &Keytool_GenerateCertificate_Call{Call: _e.mock.On("GenerateCertificate", _a0)}
}

func (_c *Keytool_GenerateCertificate_Call) Run(run func(_a0 *keytool.GenerateCertificateInputs)) *Keytool_GenerateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*keytool.GenerateCertificateInputs))
	})
	return _c
}

func (_c *Keytool_GenerateCertificate_Call) Return(_a0 error) *Keytool_GenerateCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Keytool_GenerateCertificate_Call) RunAndReturn(run func(*keytool.GenerateCertificateInputs) error) *Keytool_GenerateCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeytool creates a new instance of Keytool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeytool(t interface {
	mock.TestingT
	Cleanup(func())
}) *Keytool {
	mock := &Keytool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
